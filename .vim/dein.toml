[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # 下のステータスバーをかっこよくする
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:mline_bufhist_enable = 1
set laststatus=2
command! Btoggle :let g:mline_bufhist_enable = g:mline_bufhist_enable ? 0 : 1 | :redrawstatus!

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'mode_map': {'c': 'NORMAL'},
      \ 'active': {
      \   'left': [
      \     ['message','mode', 'paste'],
      \     ['fugitive', 'gitgutter', 'filename'],
      \   ],
      \   'right': [
      \     ['lineinfo', 'syntastic'],
      \     ['percent'],
      \     ['fileencoding', 'filetype'],
      \   ]
      \ },
      \ 'component': {
      \   'message': '黒髪ロング清楚'
      \ },
      \   'component_expand': {
      \     'syntastic': 'SyntasticStatuslineFlag'
      \   },
      \   'component_type': {
      \     'syntastic': 'error'
      \   },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'mode': 'MyMode',
      \   'syntastic': 'SyntasticStatuslineFlag',
      \   'charcode': 'MyCharCode',
      \   'gitgutter': 'MyGitGutter',
      \ },
      \ 'separator': {'left': '', 'right': ''},
      \ 'subseparator': {'left': '', 'right': ''}
      \ }
function! LightLineHello()
  if winwidth(0) > 70
    return 'Hello, world!'
  else
    return ''
  endif
endfunction

function! LightLineMode()
  return  &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction
"
function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? '' '._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
function! MyCharCode()
  if winwidth('.') <= 70
    return ''
  endif

  " Get the output of :ascii
  redir => ascii
  silent! ascii
  redir END

  if match(ascii, 'NUL') != -1
    return 'NUL'
  endif

  " Zero pad hex values
  let nrformat = '0x%02x'

  let encoding = (&fenc == '' ? &enc : &fenc)

  if encoding == 'utf-8'
    " Zero pad with 4 zeroes in unicode files
    let nrformat = '0x%04x'
  endif

  " Get the character and the numeric value from the return value of :ascii
  " This matches the two first pieces of the return value, e.g.
  " "<F>  70" => char: 'F', nr: '70'
  let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

  Format the numeric value
  let nr = printf(nrformat, nr)

  return "'". char ."' ". nr
endfunction
'''

[[plugins]] # コメントアウトを簡単に
repo = 'tomtom/tcomment_vim'

[[plugins]] # Ruby向けにendを自動挿入してくれる
repo = 'tpope/vim-endwise'

[[plugins]] # 括弧の自動挿入
repo = 'Townk/vim-autoclose'

[[plugins]] # カッコをつけたり消したりするのを簡単に
repo = 'tpope/vim-surround'

# --- 補完機能 ---
[[plugins]]
repo = 'Shougo/neocomplete'
hook_add = '''
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

inoremap <expr><C-g>     neocomplete#undo_completion()

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'


'''

[[plugins]]
repo = 'Shougo/neosnippet'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# --- end補完機能end ---

[[plugins]] # Gitの差分チェッ
repo = 'airblade/vim-gitgutter'

[[plugins]] # 確かMarkdownとかで他の言語が埋め込まれてる時に便利になるやつ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }
" INSERTモードのON／OFFに合わせてトグル
autocmd MyAutoCmd InsertEnter * :PreciousSwitch
autocmd MyAutoCmd InsertLeave * :PreciousReset
'''

[[plugins]] # html入力補助
repo =  'mattn/emmet-vim' 
hook_add = '''
let g:user_emmet_leader_key='<c-e>'
'''

[[plugins]] # 移動効率化
repo = 'deris/vim-gothrough-jk'

[[plugins]] # tmux<->vim間をシームレスに
repo = 'christoomey/vim-tmux-navigator'

[[plugins]] # quickrun"
repo = 'thinca/vim-quickrun'

[[plugins]] # F移動を連打可能に
repo = 'rhysd/clever-f.vim'


# --- Unite* ---
[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
"unite prefix key.
nnoremap [unite] <Nop>
nmap <Space>f [unite]

"unite general settings

" 大文字小文字を区別しない
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

"インサートモードで開始
let g:unite_enable_start_insert = 0
"最近開いたファイル履歴の保存数
let g:unite_source_file_mru_limit = 50

"file_mruの表示フォーマットを指定。空にすると表示スピードが高速化される
let g:unite_source_file_mru_filename_format = ''

nnoremap <silent> <Space>b :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> <Space>f :<C-u>UniteWithBufferDir -buffer-name=dotfiles file<CR>
" " レジスタ一覧
nnoremap <silent> <Space>r :<C-u>Unite -buffer-name=register register<CR>
" " 最近使用したファイル一覧
nnoremap <silent> <Space>m :<C-u>Unite file_mru<CR>

" ファイルを開くときの動作
au FileType unite nnoremap <silent> <buffer> <expr> a unite#do_action('split')
au FileType unite nnoremap <silent> <buffer> <expr> s unite#do_action('vsplit')
'''

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
depends = 'Shougo/unite.vim'

[[plugins]]
repo = 'h1mesuke/unite-outline'

[[plugins]] # Unite giti/grep でagを使う
repo = 'rking/ag.vim'
hook_add = '''
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif
'''

[[plugins]] # 使用したファイルの履歴
repo = 'Shougo/neomru.vim'

[[plugins]] # Unite からGitを操作
repo = 'kmnk/vim-unite-giti'
hook_add = '''
" grep検索
nnoremap <silent> ,g :<C-u>Unite giti/grep:. -buffer-name=search-buffer<CR>

" カーソル位置の単語をgrep検索
nnoremap <silent> ,cg :<C-u>Unite giti/grep:. -buffer-name=search-buffer<CR><C-R><C-W>

" grep検索結果の再呼出
nnoremap <silent> ,r :<C-u>UniteResume search-buffer<CR>
'''

# --- end Unite* end ---

# --- Markdown ---
[[plugins]]
repo = 'plasticboy/vim-markdown'

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

# --- end Markdown end ---

[[plugins]] # vim上でGitを操作
repo = 'tpope/vim-fugitive'
hook_add = '''
autocmd QuickFixCmdPost *grep* cwindow

" ステータス行に現在のgitブランチを表示する
set statusline+=%{fugitive#statusline()}"
'''

# --- Syntax* ---
[[plugins]]
repo = 'vim-syntastic/syntastic'
hook_add = '''
" QuickWindowConf
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" QuickWindowSize
function! SyntasticCheckHook(errors) 
  if !empty(a:errors)
    let g:syntastic_loc_list_height = min([len(a:errors), 10])
  endif
endfunction

" symbol
let g:syntastic_error_symbol = "\u2717"
let g:syntastic_warning_symbol = "\u26A0"

" Language Setting
let g:syntastic_mode_map = { 'mode': 'passive',
      \ 'active_filetypes': ['go'] }
let g:syntastic_go_checkers = ['go', 'golint']
'''

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'hokaccha/vim-html5validator'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'jason0x43/vim-js-indent'

[[plugins]]
repo = 'tpope/vim-markdown'
hook_add = '''
au BufRead,BufNewFile *.md set filetype=markdown
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
runtime.Gosched()
autocmd FileType qf wincmd J
'''

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby']

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

# --- end Syntax* end ---

